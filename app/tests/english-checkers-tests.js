QUnit.test( "Initial Board", function( assert ) {
   var design = games.model.getDesign();
   var board = design.getInitBoard();
   assert.equal( board.player , 1, "Black move");
   assert.equal( board.turn, 0, "board.turn == 0");
   assert.equal( board.player, 1, "board.player == 1");
   assert.equal( design.posToString(1) , "a8", "a8 position");
   assert.ok( board.getPiece(1) === null, "is empty");
   assert.equal( design.posToString(2) , "b8", "b8 position");
   assert.equal( board.getPiece(2).toString(design) , "White Man", "White Man");
   assert.equal( design.posToString(3) , "c8", "c8 position");
   assert.ok( board.getPiece(3) === null, "is empty");
   assert.equal( design.posToString(4) , "d8", "d8 position");
   assert.equal( board.getPiece(4).toString(design) , "White Man", "White Man");
   assert.equal( design.posToString(5) , "e8", "e8 position");
   assert.ok( board.getPiece(5) === null, "is empty");
   assert.equal( design.posToString(6) , "f8", "f8 position");
   assert.equal( board.getPiece(6).toString(design) , "White Man", "White Man");
   assert.equal( design.posToString(7) , "g8", "g8 position");
   assert.ok( board.getPiece(7) === null, "is empty");
   assert.equal( design.posToString(8) , "h8", "h8 position");
   assert.equal( board.getPiece(8).toString(design) , "White Man", "White Man");
   assert.equal( design.posToString(9) , "a7", "a7 position");
   assert.equal( board.getPiece(9).toString(design) , "White Man", "White Man");
   assert.equal( design.posToString(10) , "b7", "b7 position");
   assert.ok( board.getPiece(10) === null, "is empty");
   assert.equal( design.posToString(11) , "c7", "c7 position");
   assert.equal( board.getPiece(11).toString(design) , "White Man", "White Man");
   assert.equal( design.posToString(12) , "d7", "d7 position");
   assert.ok( board.getPiece(12) === null, "is empty");
   assert.equal( design.posToString(13) , "e7", "e7 position");
   assert.equal( board.getPiece(13).toString(design) , "White Man", "White Man");
   assert.equal( design.posToString(14) , "f7", "f7 position");
   assert.ok( board.getPiece(14) === null, "is empty");
   assert.equal( design.posToString(15) , "g7", "g7 position");
   assert.equal( board.getPiece(15).toString(design) , "White Man", "White Man");
   assert.equal( design.posToString(16) , "h7", "h7 position");
   assert.ok( board.getPiece(16) === null, "is empty");
   assert.equal( design.posToString(17) , "a6", "a6 position");
   assert.ok( board.getPiece(17) === null, "is empty");
   assert.equal( design.posToString(18) , "b6", "b6 position");
   assert.equal( board.getPiece(18).toString(design) , "White Man", "White Man");
   assert.equal( design.posToString(19) , "c6", "c6 position");
   assert.ok( board.getPiece(19) === null, "is empty");
   assert.equal( design.posToString(20) , "d6", "d6 position");
   assert.equal( board.getPiece(20).toString(design) , "White Man", "White Man");
   assert.equal( design.posToString(21) , "e6", "e6 position");
   assert.ok( board.getPiece(21) === null, "is empty");
   assert.equal( design.posToString(22) , "f6", "f6 position");
   assert.equal( board.getPiece(22).toString(design) , "White Man", "White Man");
   assert.equal( design.posToString(23) , "g6", "g6 position");
   assert.ok( board.getPiece(23) === null, "is empty");
   assert.equal( design.posToString(24) , "h6", "h6 position");
   assert.equal( board.getPiece(24).toString(design) , "White Man", "White Man");
   assert.equal( design.posToString(25) , "a5", "a5 position");
   assert.ok( board.getPiece(25) === null, "is empty");
   assert.equal( design.posToString(26) , "b5", "b5 position");
   assert.ok( board.getPiece(26) === null, "is empty");
   assert.equal( design.posToString(27) , "c5", "c5 position");
   assert.ok( board.getPiece(27) === null, "is empty");
   assert.equal( design.posToString(28) , "d5", "d5 position");
   assert.ok( board.getPiece(28) === null, "is empty");
   assert.equal( design.posToString(29) , "e5", "e5 position");
   assert.ok( board.getPiece(29) === null, "is empty");
   assert.equal( design.posToString(30) , "f5", "f5 position");
   assert.ok( board.getPiece(30) === null, "is empty");
   assert.equal( design.posToString(31) , "g5", "g5 position");
   assert.ok( board.getPiece(31) === null, "is empty");
   assert.equal( design.posToString(32) , "h5", "h5 position");
   assert.ok( board.getPiece(32) === null, "is empty");
   assert.equal( design.posToString(33) , "a4", "a4 position");
   assert.ok( board.getPiece(33) === null, "is empty");
   assert.equal( design.posToString(34) , "b4", "b4 position");
   assert.ok( board.getPiece(34) === null, "is empty");
   assert.equal( design.posToString(35) , "c4", "c4 position");
   assert.ok( board.getPiece(35) === null, "is empty");
   assert.equal( design.posToString(36) , "d4", "d4 position");
   assert.ok( board.getPiece(36) === null, "is empty");
   assert.equal( design.posToString(37) , "e4", "e4 position");
   assert.ok( board.getPiece(37) === null, "is empty");
   assert.equal( design.posToString(38) , "f4", "f4 position");
   assert.ok( board.getPiece(38) === null, "is empty");
   assert.equal( design.posToString(39) , "g4", "g4 position");
   assert.ok( board.getPiece(39) === null, "is empty");
   assert.equal( design.posToString(40) , "h4", "h4 position");
   assert.ok( board.getPiece(40) === null, "is empty");
   assert.equal( design.posToString(41) , "a3", "a3 position");
   assert.equal( board.getPiece(41).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(42) , "b3", "b3 position");
   assert.ok( board.getPiece(42) === null, "is empty");
   assert.equal( design.posToString(43) , "c3", "c3 position");
   assert.equal( board.getPiece(43).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(44) , "d3", "d3 position");
   assert.ok( board.getPiece(44) === null, "is empty");
   assert.equal( design.posToString(45) , "e3", "e3 position");
   assert.equal( board.getPiece(45).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(46) , "f3", "f3 position");
   assert.ok( board.getPiece(46) === null, "is empty");
   assert.equal( design.posToString(47) , "g3", "g3 position");
   assert.equal( board.getPiece(47).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(48) , "h3", "h3 position");
   assert.ok( board.getPiece(48) === null, "is empty");
   assert.equal( design.posToString(49) , "a2", "a2 position");
   assert.ok( board.getPiece(49) === null, "is empty");
   assert.equal( design.posToString(50) , "b2", "b2 position");
   assert.equal( board.getPiece(50).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(51) , "c2", "c2 position");
   assert.ok( board.getPiece(51) === null, "is empty");
   assert.equal( design.posToString(52) , "d2", "d2 position");
   assert.equal( board.getPiece(52).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(53) , "e2", "e2 position");
   assert.ok( board.getPiece(53) === null, "is empty");
   assert.equal( design.posToString(54) , "f2", "f2 position");
   assert.equal( board.getPiece(54).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(55) , "g2", "g2 position");
   assert.ok( board.getPiece(55) === null, "is empty");
   assert.equal( design.posToString(56) , "h2", "h2 position");
   assert.equal( board.getPiece(56).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(57) , "a1", "a1 position");
   assert.equal( board.getPiece(57).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(58) , "b1", "b1 position");
   assert.ok( board.getPiece(58) === null, "is empty");
   assert.equal( design.posToString(59) , "c1", "c1 position");
   assert.equal( board.getPiece(59).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(60) , "d1", "d1 position");
   assert.ok( board.getPiece(60) === null, "is empty");
   assert.equal( design.posToString(61) , "e1", "e1 position");
   assert.equal( board.getPiece(61).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(62) , "f1", "f1 position");
   assert.ok( board.getPiece(62) === null, "is empty");
   assert.equal( design.posToString(63) , "g1", "g1 position");
   assert.equal( board.getPiece(63).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(64) , "h1", "h1 position");
   assert.ok( board.getPiece(64) === null, "is empty");
   board.generate();
   assert.equal( board.moves.length , 7, "7 moves:");
   assert.equal( board.moves[0].toString(design) , "a3-b4", "a3-b4");
   assert.equal( board.moves[1].toString(design) , "c3-b4", "c3-b4");
   assert.equal( board.moves[2].toString(design) , "c3-d4", "c3-d4");
   assert.equal( board.moves[3].toString(design) , "e3-d4", "e3-d4");
   assert.equal( board.moves[4].toString(design) , "e3-f4", "e3-f4");
   assert.equal( board.moves[5].toString(design) , "g3-f4", "g3-f4");
   assert.equal( board.moves[6].toString(design) , "g3-h4", "g3-h4");
   board = board.apply(board.moves[0]);
   assert.equal( board.player , 2, "White move");
   assert.equal( board.turn, 1, "board.turn == 1");
   assert.equal( board.player, 2, "board.player == 2");
   assert.equal( design.posToString(41) , "a3", "a3 position");
   assert.ok( board.getPiece(41) === null, "is empty");
   assert.equal( design.posToString(34) , "b4", "b4 position");
   assert.equal( board.getPiece(34).toString(design) , "Black Man", "Black Man");
   board.generate();
   assert.equal( board.moves.length , 7, "7 moves:");
   assert.equal( board.moves[0].toString(design) , "b6-c5", "b6-c5");
   assert.equal( board.moves[1].toString(design) , "b6-a5", "b6-a5");
   assert.equal( board.moves[2].toString(design) , "d6-e5", "d6-e5");
   assert.equal( board.moves[3].toString(design) , "d6-c5", "d6-c5");
   assert.equal( board.moves[4].toString(design) , "f6-g5", "f6-g5");
   assert.equal( board.moves[5].toString(design) , "f6-e5", "f6-e5");
   assert.equal( board.moves[6].toString(design) , "h6-g5", "h6-g5");
   board = board.apply(board.moves[6]);
   assert.equal( board.player , 1, "Black move");
   assert.equal( board.turn, 0, "board.turn == 0");
   assert.equal( board.player, 1, "board.player == 1");
   assert.equal( design.posToString(41) , "a3", "a3 position");
   assert.ok( board.getPiece(41) === null, "is empty");
   assert.equal( design.posToString(34) , "b4", "b4 position");
   assert.equal( board.getPiece(34).toString(design) , "Black Man", "Black Man");
   assert.equal( design.posToString(24) , "h6", "h6 position");
   assert.ok( board.getPiece(24) === null, "is empty");
   assert.equal( design.posToString(31) , "g5", "g5 position");
   assert.equal( board.getPiece(31).toString(design) , "White Man", "White Man");
});

QUnit.test( "Man Capturing", function( assert ) {
   var design = games.model.getDesign();
   var board = design.getInitBoard().copy();
   assert.equal( board.player , 1, "Black move");
   board.clear();
   var black = design.createPiece(0, 1);
   board.setPiece(design.stringToPos("a3"), black);
   board.setPiece(design.stringToPos("f2"), black);
   var white = design.createPiece(0, 2);
   board.setPiece(design.stringToPos("c3"), white);
   board.setPiece(design.stringToPos("c5"), white);
   board.setPiece(design.stringToPos("c7"), white);
   board.setPiece(design.stringToPos("e3"), white);
   board.setPiece(design.stringToPos("e5"), white);
   board.setPiece(design.stringToPos("e7"), white);
   board.generate();
   assert.equal( board.moves.length , 2, "2 moves:");
   assert.equal( board.moves[0].toString(design) , "f2-d4-b6-d8", "f2-d4-b6-d8");
   assert.equal( board.moves[1].toString(design) , "f2-d4-f6-d8", "f2-d4-f6-d8");
   board = board.apply(board.moves[0]);
   assert.equal( board.player , 2, "White move");
   assert.equal( board.getPiece(design.stringToPos("a3")).toString(design) , "Black Man", "Black Man on a3");
   assert.equal( board.getPiece(design.stringToPos("d8")).toString(design) , "Black King", "Black King on d8");
   assert.ok( board.getPiece(design.stringToPos("f3")) === null, "f3 is empty");
   assert.ok( board.getPiece(design.stringToPos("e3")) === null, "e3 is empty");
   assert.ok( board.getPiece(design.stringToPos("c5")) === null, "c5 is empty");
   assert.ok( board.getPiece(design.stringToPos("c7")) === null, "c7 is empty");
   assert.ok( board.getPiece(design.stringToPos("d4")) === null, "d4 is empty");
   assert.ok( board.getPiece(design.stringToPos("b6")) === null, "b6 is empty");
   assert.equal( board.getPiece(design.stringToPos("c3")).toString(design) , "White Man", "White Man on c3");
   assert.equal( board.getPiece(design.stringToPos("e5")).toString(design) , "White Man", "White Man on e5");
   assert.equal( board.getPiece(design.stringToPos("e7")).toString(design) , "White Man", "White Man on e7");
});

QUnit.test( "King Capturing", function( assert ) {
   var design = games.model.getDesign();
   var board = design.getInitBoard().copy();
   assert.equal( board.player , 1, "Black move");
   board.clear();
   var black = design.createPiece(0, 1);
   board.setPiece(design.stringToPos("f2"), black);
   black = black.promote(1);
   board.setPiece(design.stringToPos("d4"), black);
   var white = design.createPiece(0, 2);
   board.setPiece(design.stringToPos("c5"), white);
   board.setPiece(design.stringToPos("c7"), white);
   board.setPiece(design.stringToPos("e5"), white);
   board.setPiece(design.stringToPos("e7"), white);
   board.setPiece(design.stringToPos("g5"), white);
   board.setPiece(design.stringToPos("g7"), white);
   board.generate();
   assert.equal( board.moves.length , 6, "6 moves:");
   assert.equal( board.moves[0].toString(design) , "d4-f6-h8", "d4-f6-h8");
   assert.equal( board.moves[1].toString(design) , "d4-f6-h4", "d4-f6-h4");
   assert.equal( board.moves[2].toString(design) , "d4-b6-d8-f6-h8", "d4-b6-d8-f6-h8");
   assert.equal( board.moves[3].toString(design) , "d4-b6-d8-f6-d4", "d4-b6-d8-f6-d4");
   assert.equal( board.moves[4].toString(design) , "d4-b6-d8-f6-h4", "d4-b6-d8-f6-h4");
   assert.equal( board.moves[5].toString(design) , "d4-f6-d8-b6-d4", "d4-f6-d8-b6-d4");
   board = board.apply(board.moves[2]);
   assert.equal( board.player , 2, "White move");
   assert.equal( board.getPiece(design.stringToPos("h8")).toString(design) , "Black King", "Black King on h8");
   assert.ok( board.getPiece(design.stringToPos("d4")) === null, "d4 is empty");
   assert.ok( board.getPiece(design.stringToPos("c5")) === null, "c5 is empty");
   assert.ok( board.getPiece(design.stringToPos("c7")) === null, "c7 is empty");
   assert.ok( board.getPiece(design.stringToPos("e7")) === null, "e7 is empty");
   assert.ok( board.getPiece(design.stringToPos("g7")) === null, "g7 is empty");
   assert.ok( board.getPiece(design.stringToPos("b6")) === null, "b6 is empty");
   assert.ok( board.getPiece(design.stringToPos("d8")) === null, "d8 is empty");
   assert.ok( board.getPiece(design.stringToPos("f6")) === null, "f6 is empty");
   assert.equal( board.getPiece(design.stringToPos("e5")).toString(design) , "White Man", "White Man on e5");
   assert.equal( board.getPiece(design.stringToPos("g5")).toString(design) , "White Man", "White Man on g5");
});
